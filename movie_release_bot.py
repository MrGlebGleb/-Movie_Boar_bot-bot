#!/usr/bin/env python3
"""
Movie release Telegram bot.
Notifies about today's premieres and allows searching for historical releases.
"""

import os
import requests
import asyncio
from datetime import datetime, time, timezone
from zoneinfo import ZoneInfo
from telegram import constants, Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    PicklePersistence,
    ContextTypes,
    ConversationHandler,
    filters, # <-- –ù–û–í–´–ô –ò–ú–ü–û–†–¢
)
import translators as ts

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ ---
def translate_text_blocking(text: str, to_lang='ru') -> str:
    if not text: return ""
    try:
        return ts.translate_text(text, translator='google', to_language=to_lang)
    except Exception as e:
        print(f"[ERROR] Translators library failed: {e}")
        return text

# --- CONFIG (from env) ---
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
TMDB_API_KEY = os.environ.get("TMDB_API_KEY")

if not TELEGRAM_BOT_TOKEN or not TMDB_API_KEY:
    raise RuntimeError("One or more environment variables are not set!")

# --- –ù–û–í–û–ï: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ ---
GET_YEAR = 0 # –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –º—ã –∂–¥–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥–æ–¥

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å TMDb ---

def _get_todays_movie_premieres_blocking(limit=5):
    # ... (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    today_str = datetime.now(timezone.utc).strftime('%Y-%m-%d')
    url = "https://api.themoviedb.org/3/discover/movie"
    params = {
        "api_key": TMDB_API_KEY, "language": "en-US", "sort_by": "popularity.desc",
        "include_adult": "false", "with_original_language": "en",
        "primary_release_date.gte": today_str, "primary_release_date.lte": today_str,
    }
    r = requests.get(url, params=params, timeout=20)
    r.raise_for_status()
    return r.json().get("results", [])[:limit]

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –¥–∞—Ç–µ –≤ –ø—Ä–æ—à–ª–æ–º ---
def _get_historical_premieres_blocking(year: int, month_day: str, limit=3):
    target_date = f"{year}-{month_day}"
    url = "https://api.themoviedb.org/3/discover/movie"
    params = {
        "api_key": TMDB_API_KEY, "language": "en-US", "sort_by": "popularity.desc",
        "include_adult": "false", "primary_release_date.gte": target_date,
        "primary_release_date.lte": target_date,
    }
    r = requests.get(url, params=params, timeout=20)
    r.raise_for_status()
    return r.json().get("results", [])[:limit]


def _format_movie_message(movie: dict):
    # ... (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    title = movie.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    overview = movie.get("overview", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
    poster_path = movie.get("poster_path")
    poster_url = f"https://image.tmdb.org/t/p/w780{poster_path}" if poster_path else None
    rating = movie.get("vote_average", 0)
    movie_id = movie.get("id")
    movie_url = f"https://www.themoviedb.org/movie/{movie_id}" if movie_id else None
    text = f"üé¨ *–°–µ–≥–æ–¥–Ω—è –ø—Ä–µ–º—å–µ—Ä–∞: {title}*\n\n"
    if rating > 0: text += f"*–†–µ–π—Ç–∏–Ω–≥:* {rating:.1f}/10 ‚≠ê\n\n"
    text += overview
    if movie_url: text += f"\n\n[–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ TMDb]({movie_url})"
    return text, poster_url

# --- –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–¢–ü–†–ê–í–ö–ò ---

async def send_premieres_to_chat(chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    # ... (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    app: Application = context.application
    try:
        movies = await asyncio.to_thread(_get_todays_movie_premieres_blocking)
    except Exception as e:
        print(f"[ERROR] TMDb request failed for chat {chat_id}: {e}")
        await app.bot.send_message(chat_id=chat_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–º—å–µ—Ä–∞—Ö.")
        return
    if not movies:
        await app.bot.send_message(chat_id=chat_id, text="üé¨ –ó–Ω–∞—á–∏–º—ã—Ö –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω—ã—Ö –ø—Ä–µ–º—å–µ—Ä –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    for movie in movies:
        original_title = movie.get("title", "No Title")
        original_overview = movie.get("overview", "No overview available.")
        translated_title = await asyncio.to_thread(translate_text_blocking, original_title)
        translated_overview = await asyncio.to_thread(translate_text_blocking, original_overview)
        movie["title"] = translated_title
        movie["overview"] = translated_overview
        text, poster = _format_movie_message(movie)
        await _send_to_chat(app, chat_id, text, poster)
        await asyncio.sleep(1.0)

async def _send_to_chat(app: Application, chat_id: int, text: str, photo_url: str | None):
    # ... (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    try:
        if photo_url:
            await app.bot.send_photo(chat_id=chat_id, photo=photo_url, caption=text, parse_mode=constants.ParseMode.MARKDOWN)
        else:
            await app.bot.send_message(chat_id=chat_id, text=text, parse_mode=constants.ParseMode.MARKDOWN)
    except Exception as e:
        print(f"[WARN] Failed to send to {chat_id}: {e}")

# --- –ó–ê–î–ê–ß–ê –î–õ–Ø –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê ---

async def daily_check_job(context: ContextTypes.DEFAULT_TYPE):
    # ... (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    print(f"[{datetime.now().isoformat()}] Running scheduled daily_check_job")
    chat_ids = context.bot_data.get("chat_ids", set())
    if not chat_ids:
        print("[INFO] No registered chats; skipping.")
        return
    print(f"[INFO] Sending daily premieres to {len(chat_ids)} chats.")
    for chat_id in list(chat_ids):
        await send_premieres_to_chat(chat_id, context)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î TELEGRAM (–±–µ–∑ –¥–∏–∞–ª–æ–≥–∞) ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    chat_id = update.effective_chat.id
    chat_ids = context.bot_data.setdefault("chat_ids", set())
    if chat_id not in chat_ids:
        chat_ids.add(chat_id)
        await update.message.reply_text("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å—é–¥–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∞–Ω–æ–Ω—Å—ã –∫–∏–Ω–æ–ø—Ä–µ–º—å–µ—Ä.")
        print(f"[INFO] Registered chat_id {chat_id}")
    else:
        await update.message.reply_text("–≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏.")

async def premieres_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    chat_id = update.effective_chat.id
    await update.message.reply_text("üîç –ò—â—É —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –ø—Ä–µ–º—å–µ—Ä—ã...")
    await send_premieres_to_chat(chat_id, context)
    
async def stop_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    chat_id = update.effective_chat.id
    chat_ids = context.bot_data.setdefault("chat_ids", set())
    if chat_id in chat_ids:
        chat_ids.remove(chat_id)
        await update.message.reply_text("‚ùå –≠—Ç–æ—Ç —á–∞—Ç –æ—Ç–ø–∏—Å–∞–Ω –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏. –ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
        print(f"[INFO] Unregistered chat_id {chat_id}")
    else:
        await update.message.reply_text("–≠—Ç–æ—Ç —á–∞—Ç –∏ —Ç–∞–∫ –Ω–µ –±—ã–ª –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.")

# --- –ù–û–í–´–ô –†–ê–ó–î–ï–õ: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ /history ---

async def history_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∏ –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –≥–æ–¥."""
    await update.message.reply_text(
        "üìÖ –ö–∞–∫–æ–π –≥–æ–¥ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–¥ –æ—Ç 1970 –¥–æ 2024.\n\n"
        "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ /cancel."
    )
    return GET_YEAR

async def get_year_from_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–æ–¥, –∏—â–µ—Ç —Ñ–∏–ª—å–º—ã –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥."""
    chat_id = update.effective_chat.id
    try:
        year = int(update.message.text)
        if not (1970 <= year <= 2024):
            raise ValueError("–ì–æ–¥ –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1995).")
        return GET_YEAR # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∂–¥–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞

    month_day = datetime.now(timezone.utc).strftime('%m-%d')
    await update.message.reply_text(f"üîç –ò—â—É —Ç–æ–ø-3 —Ä–µ–ª–∏–∑–∞ –∑–∞ {month_day}-{year}...")

    try:
        movies = await asyncio.to_thread(_get_historical_premieres_blocking, year, month_day)
        if not movies:
            await update.message.reply_text(f"ü§∑‚Äç‚ôÇÔ∏è –ù–µ –Ω–∞—à–µ–ª –∑–Ω–∞—á–∏–º—ã—Ö –ø—Ä–µ–º—å–µ—Ä –∑–∞ —ç—Ç—É –¥–∞—Ç—É –≤ {year} –≥–æ–¥—É.")
        else:
            response_text = f"üìú *–¢–æ–ø-3 —Ä–µ–ª–∏–∑–∞ –∑–∞ {month_day}-{year}:*\n\n"
            for movie in movies:
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
                title = await asyncio.to_thread(translate_text_blocking, movie.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                rating = movie.get('vote_average', 0)
                response_text += f"‚Ä¢ *{title}* (–†–µ–π—Ç–∏–Ω–≥: {rating:.1f} ‚≠ê)\n"
            await update.message.reply_text(response_text, parse_mode=constants.ParseMode.MARKDOWN)

    except Exception as e:
        print(f"[ERROR] Historical search failed for chat {chat_id}: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    return ConversationHandler.END # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥

async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥."""
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# --- –°–ë–û–†–ö–ê –ò –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---
def main():
    persistence = PicklePersistence(filepath="bot_data.pkl")
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).persistence(persistence).build()

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ ---
    history_conversation_handler = ConversationHandler(
        entry_points=[CommandHandler("history", history_command)],
        states={
            GET_YEAR: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_year_from_user)]
        },
        fallbacks=[CommandHandler("cancel", cancel_command)],
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
    application.add_handler(history_conversation_handler)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("releases", premieres_command))
    application.add_handler(CommandHandler("premieres", premieres_command))
    application.add_handler(CommandHandler("stop", stop_command))

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∑–∞–¥–∞—á—É
    tz = ZoneInfo("Europe/Amsterdam")
    scheduled_time = time(hour=10, minute=0, tzinfo=tz) 
    application.job_queue.run_daily(daily_check_job, scheduled_time, name="daily_movie_check")

    print("[INFO] Starting bot (run_polling).")
    application.run_polling()


if __name__ == "__main__":
    main()

#!/usr/bin/env python3
"""
Movie release Telegram bot with all features including pagination and an advanced random movie feature.
Now focused on digital releases and unified message format.
"""

import os
import requests
import asyncio
import uuid
import random
from datetime import datetime, time, timezone, timedelta
from zoneinfo import ZoneInfo
from telegram import constants, Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    PicklePersistence,
    ContextTypes,
)
import translators as ts

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def translate_text_blocking(text: str, to_lang='ru') -> str:
    if not text: return ""
    try: return ts.translate_text(text, translator='google', to_language=to_lang)
    except Exception as e:
        print(f"[ERROR] Translators library failed: {e}")
        return text

async def on_startup(context: ContextTypes.DEFAULT_TYPE):
    """–ö—ç—à–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞."""
    print("[INFO] Caching movie genres...")
    url = "https://api.themoviedb.org/3/genre/movie/list"
    params = {"api_key": TMDB_API_KEY, "language": "ru-RU"}
    try:
        r = requests.get(url, params=params, timeout=15)
        r.raise_for_status()
        genres = {g['id']: g['name'] for g in r.json()['genres']}
        context.bot_data['genres'] = genres
        context.bot_data['genres_by_name'] = {v.lower(): k for k, v in genres.items()}
        print(f"[INFO] Successfully cached {len(genres)} genres.")
    except Exception as e:
        print(f"[ERROR] Could not cache genres: {e}")
        context.bot_data['genres'], context.bot_data['genres_by_name'] = {}, {}

# --- CONFIG ---
TELEGRAM_BOT_TOKEN, TMDB_API_KEY = os.environ.get("TELEGRAM_BOT_TOKEN"), os.environ.get("TMDB_API_KEY")
if not TELEGRAM_BOT_TOKEN or not TMDB_API_KEY:
    raise RuntimeError("One or more environment variables are not set!")

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å TMDb ---

def _get_movie_details_blocking(movie_id: int):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ, –≤–∫–ª—é—á–∞—è —Ç—Ä–µ–π–ª–µ—Ä—ã –∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
    """
    url = f"https://api.themoviedb.org/3/movie/{movie_id}"
    params = {"api_key": TMDB_API_KEY, "append_to_response": "videos,watch/providers"}
    r = requests.get(url, params=params, timeout=20)
    r.raise_for_status()
    return r.json()

def _parse_trailer(videos_data: dict) -> str | None:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç URL —Ç—Ä–µ–π–ª–µ—Ä–∞ YouTube –∏–∑ –¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ."""
    for video in videos_data.get("results", []):
        if video.get("type") == "Trailer" and video.get("site") == "YouTube":
            return f"https://www.youtube.com/watch?v={video['key']}"
    return None

def _get_watch_status_string(watch_providers_data: dict) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤,
    –ø–µ—Ä–µ—á–∏—Å–ª—è—è –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã.
    """
    results_ru = watch_providers_data.get("results", {}).get("RU")
    results_us = watch_providers_data.get("results", {}).get("US")

    providers = []
    # –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ–º RU
    if results_ru:
        if results_ru.get("flatrate"):
            providers.extend([p["provider_name"] for p in results_ru["flatrate"][:2]])
        if results_ru.get("buy") and not providers: # –¢–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∫–∞, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
            providers.extend([p["provider_name"] for p in results_ru["buy"][:2]])
    
    # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - US, –µ—Å–ª–∏ –Ω–µ—Ç RU –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    if not providers and results_us:
        if results_us.get("flatrate"):
            providers.extend([p["provider_name"] for p in results_us["flatrate"][:2]])
        if results_us.get("buy") and not providers:
            providers.extend([p["provider_name"] for p in results_us["buy"][:2]])

    if providers:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º set, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        return f"üì∫ –û–Ω–ª–∞–π–Ω: {', '.join(sorted(list(set(providers))))}"
    return "üçø –°—Ç–∞—Ç—É—Å —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ä–µ–ª–∏–∑–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"


async def _get_todays_top_digital_releases_blocking(limit=5):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø-N —Å–∞–º—ã—Ö –∑–Ω–∞—á–∏–º—ã—Ö —Ñ–∏–ª—å–º–æ–≤, —á–µ–π –¶–ò–§–†–û–í–û–ô —Ä–µ–ª–∏–∑ —Å–æ—Å—Ç–æ—è–ª—Å—è —Å–µ–≥–æ–¥–Ω—è.
    –ò—â–µ—Ç –ø–æ –¥–∞—Ç–µ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ä–µ–ª–∏–∑–∞, –∞ –Ω–µ —Ç–µ–∞—Ç—Ä–∞–ª—å–Ω–æ–π –ø—Ä–µ–º—å–µ—Ä—ã.
    """
    today_str = datetime.now(timezone.utc).strftime('%Y-%m-%d')
    url = "https://api.themoviedb.org/3/discover/movie"
    params = {
        "api_key": TMDB_API_KEY,
        "language": "en-US",
        "sort_by": "popularity.desc",
        "include_adult": "false",
        "release_date.gte": today_str,
        "release_date.lte": today_str,
        "with_release_type": 4, # 4 = Digital Release
        "region": 'RU',
        "vote_count.gte": 10
    }
    
    try:
        r = requests.get(url, params=params, timeout=20)
        r.raise_for_status()
        potential_releases = [m for m in r.json().get("results", []) if m.get("poster_path")]
    except requests.exceptions.RequestException as e:
        print(f"[ERROR] TMDb discover API for digital releases failed: {e}")
        return []

    if not potential_releases:
        print("[INFO] No digital releases found for RU, trying US region as a fallback.")
        params['region'] = 'US'
        try:
            r = requests.get(url, params=params, timeout=20)
            r.raise_for_status()
            potential_releases = [m for m in r.json().get("results", []) if m.get("poster_path")]
        except requests.exceptions.RequestException as e:
            print(f"[ERROR] TMDb discover API fallback for US region failed: {e}")
            return []

    top_releases = potential_releases[:limit]
    if not top_releases:
        return []
        
    enriched_releases = []
    
    # –û–±–æ–≥–∞—â–∞–µ–º —Ç–æ–ø-N —Ñ–∏–ª—å–º–æ–≤ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π (—Ç—Ä–µ–π–ª–µ—Ä, –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã)
    details_tasks = [asyncio.to_thread(_get_movie_details_blocking, movie['id']) for movie in top_releases]
    all_details = await asyncio.gather(*details_tasks)

    for i, movie in enumerate(top_releases):
        details = all_details[i]
        enriched_movie = {
            **movie,
            "overview": details.get("overview", movie.get("overview")),
            "watch_status": _get_watch_status_string(details.get("watch/providers", {})),
            "trailer_url": _parse_trailer(details.get("videos", {})),
            "poster_url": f"https://image.tmdb.org/t/p/w780{movie['poster_path']}"
        }
        enriched_releases.append(enriched_movie)
    
    return enriched_releases


async def _get_next_digital_releases_blocking(limit=5, search_days=90):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à–∏–π –¥–µ–Ω—å —Å —Ü–∏—Ñ—Ä–æ–≤—ã–º–∏ —Ä–µ–ª–∏–∑–∞–º–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø-N —Ä–µ–ª–∏–∑–æ–≤ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.
    """
    start_date = datetime.now(timezone.utc) + timedelta(days=1)
    
    for i in range(search_days):
        target_date = start_date + timedelta(days=i)
        target_date_str = target_date.strftime('%Y-%m-%d')
        
        url = "https://api.themoviedb.org/3/discover/movie"
        params = {
            "api_key": TMDB_API_KEY,
            "language": "en-US",
            "sort_by": "popularity.desc",
            "include_adult": "false",
            "release_date.gte": target_date_str,
            "release_date.lte": target_date_str,
            "with_release_type": 4, # Digital Release
            "region": 'RU',
            "vote_count.gte": 10
        }
        
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ —Ä–µ–≥–∏–æ–Ω–µ RU
        try:
            r = requests.get(url, params=params, timeout=20)
            r.raise_for_status()
            potential_releases = [m for m in r.json().get("results", []) if m.get("poster_path")]
        except requests.exceptions.RequestException:
            potential_releases = []

        # –ï—Å–ª–∏ –≤ RU –ø—É—Å—Ç–æ, –∏—â–µ–º –≤ US
        if not potential_releases:
            params['region'] = 'US'
            try:
                r = requests.get(url, params=params, timeout=20)
                r.raise_for_status()
                potential_releases = [m for m in r.json().get("results", []) if m.get("poster_path")]
            except requests.exceptions.RequestException:
                potential_releases = []
        
        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ä–µ–ª–∏–∑—ã –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
        if potential_releases:
            print(f"[INFO] Found next digital releases on {target_date_str}")
            top_releases = potential_releases[:limit]
            enriched_releases = []
            
            details_tasks = [asyncio.to_thread(_get_movie_details_blocking, movie['id']) for movie in top_releases]
            all_details = await asyncio.gather(*details_tasks)

            for idx, movie in enumerate(top_releases):
                details = all_details[idx]
                enriched_movie = {
                    **movie,
                    "overview": details.get("overview", movie.get("overview")),
                    "watch_status": _get_watch_status_string(details.get("watch/providers", {})),
                    "trailer_url": _parse_trailer(details.get("videos", {})),
                    "poster_url": f"https://image.tmdb.org/t/p/w780{movie['poster_path']}"
                }
                enriched_releases.append(enriched_movie)
            
            return enriched_releases, target_date

    return [], None


def _get_historical_premieres_blocking(year: int, month_day: str, limit=3):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø-N –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–º—å–µ—Ä –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ–¥—É.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /year.
    """
    target_date = f"{year}-{month_day}"
    url = "https://api.themoviedb.org/3/discover/movie"
    params = {"api_key": TMDB_API_KEY, "language": "en-US", "sort_by": "popularity.desc", "include_adult": "false", "primary_release_date.gte": target_date, "primary_release_date.lte": target_date}
    r = requests.get(url, params=params, timeout=20)
    r.raise_for_status()
    return [m for m in r.json().get("results", []) if m.get("poster_path")][:limit]

def _get_random_movie_blocking(with_genres: str = None, without_genres: str = None, with_keywords: str = None, without_keywords: str = None):
    """–ë–æ–ª–µ–µ –≥–∏–±–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞."""
    discover_url = "https://api.themoviedb.org/3/discover/movie"
    params = {
        "api_key": TMDB_API_KEY, "language": "en-US", "sort_by": "popularity.desc",
        "include_adult": "false", "vote_average.gte": 7.0, "vote_count.gte": 100,
        "primary_release_date.gte": "1985-01-01", "primary_release_date.lte": "2025-12-31",
        "page": 1
    }
    if with_genres: params["with_genres"] = with_genres
    if without_genres: params["without_genres"] = without_genres
    if with_keywords: params["with_keywords"] = with_keywords
    if without_keywords: params["without_keywords"] = without_keywords

    r = requests.get(discover_url, params=params, timeout=20)
    r.raise_for_status()
    data = r.json()
    total_pages = data.get("total_pages", 1)
    if total_pages == 0: return None
    
    random_page = random.randint(1, min(total_pages, 500))
    params["page"] = random_page
    r = requests.get(discover_url, params=params, timeout=20)
    r.raise_for_status()
    results = [m for m in r.json().get("results", []) if m.get("poster_path")]
    return random.choice(results) if results else None


async def _enrich_movie_data(movie: dict) -> dict:
    """
    –û–±–æ–≥–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º–∞, –ø–µ—Ä–µ–≤–æ–¥—è –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è—è —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞,
    URL —Ç—Ä–µ–π–ª–µ—Ä–∞ –∏ URL –ø–æ—Å—Ç–µ—Ä–∞.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è /year –∏ /random –∫–æ–º–∞–Ω–¥.
    """
    details = await asyncio.to_thread(_get_movie_details_blocking, movie['id'])
    overview_ru = await asyncio.to_thread(translate_text_blocking, movie.get("overview", ""))
    await asyncio.sleep(0.4) # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—Ö–æ–¥–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
    return {
        **movie,
        "overview": overview_ru,
        "watch_status": _get_watch_status_string(details.get("watch/providers", {})),
        "trailer_url": _parse_trailer(details.get("videos", {})),
        "poster_url": f"https://image.tmdb.org/t/p/w780{movie['poster_path']}"
    }

# --- –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –ò –ü–ê–ì–ò–ù–ê–¶–ò–Ø ---

async def format_movie_message(movie_data: dict, genres_map: dict, title_prefix: str, is_paginated: bool = False, current_index: int = 0, total_count: int = 1, list_id: str = "", reroll_data: str = None):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏."""
    title, overview, poster_url = movie_data.get("title"), movie_data.get("overview"), movie_data.get("poster_url")
    rating, genre_ids = movie_data.get("vote_average", 0), movie_data.get("genre_ids", [])
    genre_names = [genres_map.get(gid, "") for gid in genre_ids[:2]]
    genres_str, watch_status, trailer_url = ", ".join(filter(None, genre_names)), movie_data.get("watch_status"), movie_data.get("trailer_url")
    
    text = f"{title_prefix} *{title}*\n\n"
    if rating > 0: text += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating:.1f}/10\n"
    if watch_status: text += f"–°—Ç–∞—Ç—É—Å: {watch_status}\n"
    if genres_str: text += f"–ñ–∞–Ω—Ä: {genres_str}\n"
    text += f"\n{overview}"
    
    keyboard = []
    if is_paginated:
        nav_buttons = []
        if current_index > 0: nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{list_id}_{current_index - 1}"))
        nav_buttons.append(InlineKeyboardButton(f"[{current_index + 1}/{total_count}]", callback_data="noop"))
        if current_index < total_count - 1: nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"page_{list_id}_{current_index + 1}"))
        keyboard.append(nav_buttons)
    
    action_buttons = []
    if reroll_data: action_buttons.append(InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data=reroll_data))
    if trailer_url: action_buttons.append(InlineKeyboardButton("üé¨ –°–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–µ–π–ª–µ—Ä", url=trailer_url))
    if action_buttons: keyboard.append(action_buttons)
    
    return text, poster_url, InlineKeyboardMarkup(keyboard) if keyboard else None

# --- –ö–û–ú–ê–ù–î–´ –ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start, –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç —á–∞—Ç –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –∏ –≤—ã–≤–æ–¥–∏—Ç –ø–æ–º–æ—â—å."""
    chat_id = update.effective_chat.id
    chat_ids = context.bot_data.setdefault("chat_ids", set())
    msg = (
        "‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n\n"
        "–Ø –±—É–¥—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 14:00 –ø–æ –ú–°–ö –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å—é–¥–∞ –∞–Ω–æ–Ω—Å—ã *—Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤*.\n\n"
        "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "‚Ä¢ `/releases` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å *—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Ä–µ–ª–∏–∑—ã* –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n"
        "‚Ä¢ `/next` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ —Ü–∏—Ñ—Ä–æ–≤—ã–µ —Ä–µ–ª–∏–∑—ã.\n"
        "‚Ä¢ `/random` ‚Äî –≤—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –ø–æ –∂–∞–Ω—Ä—É.\n"
        "‚Ä¢ `/year <–≥–æ–¥>` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø-3 —Ñ–∏–ª—å–º–∞, –≤—ã—à–µ–¥—à–∏—Ö –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –≤ –ø—Ä–æ—à–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: `/year 1999`).\n"
        "‚Ä¢ `/help` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "‚Ä¢ `/stop` ‚Äî –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏."
    )
    if chat_id not in chat_ids:
        chat_ids.add(chat_id)
        await update.message.reply_text(msg, parse_mode=constants.ParseMode.MARKDOWN)
    else:
        await update.message.reply_text("–≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ. " + msg, parse_mode=constants.ParseMode.MARKDOWN)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥."""
    await update.message.reply_text(
        "**–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:**\n\n"
        "‚Ä¢ `/releases` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å *—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Ä–µ–ª–∏–∑—ã* –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n"
        "‚Ä¢ `/next` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ —Ü–∏—Ñ—Ä–æ–≤—ã–µ —Ä–µ–ª–∏–∑—ã.\n"
        "‚Ä¢ `/random` ‚Äî –≤—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –ø–æ –∂–∞–Ω—Ä—É.\n"
        "‚Ä¢ `/year <–≥–æ–¥>` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø-3 —Ñ–∏–ª—å–º–∞, –≤—ã—à–µ–¥—à–∏—Ö –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –≤ –ø—Ä–æ—à–ª–æ–º.\n"
        "‚Ä¢ `/start` ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.\n"
        "‚Ä¢ `/stop` ‚Äî –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.",
        parse_mode=constants.ParseMode.MARKDOWN
    )

async def stop_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /stop –∏ –æ—Ç–ø–∏—Å—ã–≤–∞–µ—Ç —á–∞—Ç –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏."""
    chat_id = update.effective_chat.id
    if chat_id in context.bot_data.setdefault("chat_ids", set()):
        context.bot_data["chat_ids"].remove(chat_id)
        await update.message.reply_text("‚ùå –≠—Ç–æ—Ç —á–∞—Ç –æ—Ç–ø–∏—Å–∞–Ω –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")
    else:
        await update.message.reply_text("–≠—Ç–æ—Ç —á–∞—Ç –∏ —Ç–∞–∫ –Ω–µ –±—ã–ª –ø–æ–¥–ø–∏—Å–∞–Ω.")

async def premieres_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /releases, –ø–æ–∫–∞–∑—ã–≤–∞—è —Ç–æ–ø-5 —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤.
    """
    await update.message.reply_text("üîç –ò—â—É –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ *—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Ä–µ–ª–∏–∑—ã*...")
    try:
        base_movies = await _get_todays_top_digital_releases_blocking(limit=5)
        if not base_movies:
            await update.message.reply_text("üé¨ –ó–Ω–∞—á–∏–º—ã—Ö *—Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤* –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª—å–º–∞
        enriched_movies = []
        for movie in base_movies:
            movie_with_translated_overview = {
                **movie,
                "overview": await asyncio.to_thread(translate_text_blocking, movie.get("overview", ""))
            }
            enriched_movies.append(movie_with_translated_overview)
            await asyncio.sleep(0.4) # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—Ö–æ–¥–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞

        list_id = str(uuid.uuid4())
        context.bot_data.setdefault('movie_lists', {})[list_id] = enriched_movies
        text, poster, markup = await format_movie_message(enriched_movies[0], context.bot_data.get('genres', {}), "üé¨ –°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–∏—Ç –≤ —Ü–∏—Ñ—Ä–µ:", is_paginated=True, current_index=0, total_count=len(enriched_movies), list_id=list_id)
        await update.message.reply_photo(photo=poster, caption=text, parse_mode=constants.ParseMode.MARKDOWN, reply_markup=markup)
    except Exception as e:
        print(f"[ERROR] premieres_command failed: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–∞—Ö.")

async def next_releases_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /next, –ø–æ–∫–∞–∑—ã–≤–∞—è –±–ª–∏–∂–∞–π—à–∏–µ –±—É–¥—É—â–∏–µ —Ü–∏—Ñ—Ä–æ–≤—ã–µ —Ä–µ–ª–∏–∑—ã.
    """
    await update.message.reply_text("üîç –ò—â—É –±–ª–∏–∂–∞–π—à–∏–µ *—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Ä–µ–ª–∏–∑—ã*...")
    try:
        base_movies, release_date = await _get_next_digital_releases_blocking(limit=5)
        
        if not base_movies or not release_date:
            await update.message.reply_text("üé¨ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ü–∏—Ñ—Ä–æ–≤—ã–µ —Ä–µ–ª–∏–∑—ã –≤ –±–ª–∏–∂–∞–π—à–∏–µ 3 –º–µ—Å—è—Ü–∞.")
            return
        
        enriched_movies = []
        for movie in base_movies:
            movie_with_translated_overview = {
                **movie,
                "overview": await asyncio.to_thread(translate_text_blocking, movie.get("overview", ""))
            }
            enriched_movies.append(movie_with_translated_overview)
            await asyncio.sleep(0.4)

        list_id = str(uuid.uuid4())
        context.bot_data.setdefault('movie_lists', {})[list_id] = enriched_movies
        
        release_date_formatted = release_date.strftime('%d.%m.%Y')
        title_prefix = f"üé¨ –ë–ª–∏–∂–∞–π—à–∏–π —Ä–µ–ª–∏–∑ ({release_date_formatted}):"

        text, poster, markup = await format_movie_message(
            enriched_movies[0], 
            context.bot_data.get('genres', {}), 
            title_prefix, 
            is_paginated=True, 
            current_index=0, 
            total_count=len(enriched_movies), 
            list_id=list_id
        )
        await update.message.reply_photo(photo=poster, caption=text, parse_mode=constants.ParseMode.MARKDOWN, reply_markup=markup)
    except Exception as e:
        print(f"[ERROR] next_releases_command failed: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±–ª–∏–∂–∞–π—à–∏—Ö —Ä–µ–ª–∏–∑–æ–≤.")


async def year_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /year, –ø–æ–∫–∞–∑—ã–≤–∞—è —Ç–æ–ø-3 —Ñ–∏–ª—å–º–∞, –≤—ã—à–µ–¥—à–∏—Ö –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –≤ –ø—Ä–æ—à–ª–æ–º.
    """
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≥–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/year 1999`", parse_mode=constants.ParseMode.MARKDOWN)
        return
    try:
        year = int(context.args[0])
        if not (1970 <= year <= datetime.now().year): raise ValueError("–ì–æ–¥ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
    except (ValueError, IndexError):
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1995).")
        return
    await update.message.reply_text(f"üîç –ò—â—É —Ç–æ–ø-3 —Ä–µ–ª–∏–∑–∞ –∑–∞ {year} –≥–æ–¥...")
    try:
        month_day = datetime.now(timezone.utc).strftime('%m-%d')
        base_movies = await asyncio.to_thread(_get_historical_premieres_blocking, year, month_day)
        if not base_movies:
            await update.message.reply_text(f"ü§∑‚Äç‚ôÇÔ∏è –ù–µ –Ω–∞—à–µ–ª –∑–Ω–∞—á–∏–º—ã—Ö –ø—Ä–µ–º—å–µ—Ä –∑–∞ —ç—Ç—É –¥–∞—Ç—É –≤ {year} –≥–æ–¥—É.")
            return
        enriched_movies = await asyncio.gather(*[_enrich_movie_data(movie) for movie in base_movies])
        list_id = str(uuid.uuid4())
        context.bot_data.setdefault('movie_lists', {})[list_id] = enriched_movies
        text, poster, markup = await format_movie_message(enriched_movies[0], context.bot_data.get('genres', {}), f"üéûÔ∏è –†–µ–ª–∏–∑ {year} –≥–æ–¥–∞:", is_paginated=True, current_index=0, total_count=len(enriched_movies), list_id=list_id)
        await update.message.reply_photo(photo=poster, caption=text, parse_mode=constants.ParseMode.MARKDOWN, reply_markup=markup)
    except Exception as e:
        print(f"[ERROR] year_command failed: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –≥–æ–¥—É.")

async def pagination_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏."""
    query = update.callback_query
    await query.answer()
    try:
        _, list_id, new_index_str = query.data.split("_")
        new_index = int(new_index_str)
    except (ValueError, IndexError): return
    
    movies = context.bot_data.get('movie_lists', {}).get(list_id)
    if not movies or not (0 <= new_index < len(movies)):
        await query.edit_message_text("–û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return
    
    release_date_str = movies[new_index].get('release_date', '????')
    
    try:
        release_date_obj = datetime.strptime(release_date_str, '%Y-%m-%d').date()
        today_date_obj = datetime.now(timezone.utc).date()
    except ValueError:
        release_date_obj = None
        today_date_obj = datetime.now(timezone.utc).date()

    if release_date_obj == today_date_obj:
        title_prefix = "üé¨ –°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–∏—Ç –≤ —Ü–∏—Ñ—Ä–µ:"
    elif release_date_obj and release_date_obj > today_date_obj:
        release_date_formatted = release_date_obj.strftime('%d.%m.%Y')
        title_prefix = f"üé¨ –ë–ª–∏–∂–∞–π—à–∏–π —Ä–µ–ª–∏–∑ ({release_date_formatted}):"
    else: # –ü—Ä–æ—à–ª—ã–µ –¥–∞—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /year
        year_str = release_date_str[:4]
        title_prefix = f"üéûÔ∏è –†–µ–ª–∏–∑ {year_str} –≥–æ–¥–∞:"

    text, poster, markup = await format_movie_message(
        movies[new_index], context.bot_data.get('genres', {}), title_prefix, is_paginated=True, current_index=new_index, total_count=len(movies), list_id=list_id
    )
    try:
        media = InputMediaPhoto(media=poster, caption=text, parse_mode=constants.ParseMode.MARKDOWN)
        await query.edit_message_media(media=media, reply_markup=markup)
    except Exception as e:
        print(f"[WARN] Failed to edit message media: {e}")

async def random_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /random, –ø—Ä–µ–¥–ª–∞–≥–∞—è –≤—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞."""
    genres_by_name = context.bot_data.get('genres_by_name', {})
    if not genres_by_name:
        await update.message.reply_text("–ñ–∞–Ω—Ä—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.")
        return

    target_genres = ["–ë–æ–µ–≤–∏–∫", "–ö–æ–º–µ–¥–∏—è", "–£–∂–∞—Å—ã", "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "–¢—Ä–∏–ª–ª–µ—Ä", "–î—Ä–∞–º–∞", "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è", "–§—ç–Ω—Ç–µ–∑–∏", "–î–µ—Ç–µ–∫—Ç–∏–≤", "–ö—Ä–∏–º–∏–Ω–∞–ª"]
    keyboard = []
    row = [InlineKeyboardButton("–ú—É–ª—å—Ç—Ñ–∏–ª—å–º—ã", callback_data="random_cartoon"), InlineKeyboardButton("–ê–Ω–∏–º–µ", callback_data="random_anime")]
    keyboard.append(row)
    row = []
    for genre_name in target_genres:
        genre_id = genres_by_name.get(genre_name.lower())
        if genre_id:
            row.append(InlineKeyboardButton(genre_name, callback_data=f"random_genre_{genre_id}"))
            if len(row) == 2:
                keyboard.append(row)
                row = []
    if row: keyboard.append(row)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –∂–∞–Ω—Ä:", reply_markup=InlineKeyboardMarkup(keyboard))

async def process_random_request(query: Update.callback_query, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è."""
    data = query.data
    random_type = data.split("_")[1]
    
    genres_map = context.bot_data.get('genres', {})
    animation_id = next((gid for gid, name in genres_map.items() if name == "–ú—É–ª—å—Ç—Ñ–∏–ª—å–º"), "16")
    anime_keyword_id = "210024"

    params, search_query_text = {}, ""

    if random_type == "genre":
        genre_id = data.split("_")[2]
        params = {"with_genres": genre_id, "without_genres": animation_id}
        search_query_text = f"'{genres_map.get(int(genre_id))}'"
    elif random_type == "cartoon":
        params = {"with_genres": animation_id, "without_keywords": anime_keyword_id}
        search_query_text = "'–ú—É–ª—å—Ç—Ñ–∏–ª—å–º'"
    elif random_type == "anime":
        params = {"with_genres": animation_id, "with_keywords": anime_keyword_id}
        search_query_text = "'–ê–Ω–∏–º–µ'"
    
    await query.edit_message_text(f"üîç –ü–æ–¥–±–∏—Ä–∞—é —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {search_query_text}...")
    try:
        random_movie = await asyncio.to_thread(_get_random_movie_blocking, **params)
        if not random_movie:
            await query.edit_message_text("ü§∑‚Äç‚ôÇÔ∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∏–ª—å–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞–∑.")
            return

        enriched_movie = await _enrich_movie_data(random_movie)
        text, poster, markup = await format_movie_message(enriched_movie, genres_map, "üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º:", reroll_data=data)
        
        media = InputMediaPhoto(media=poster, caption=text, parse_mode=constants.ParseMode.MARKDOWN)
        await query.edit_message_media(media=media, reply_markup=markup)
    except Exception as e:
        print(f"[ERROR] process_random_request failed: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∏–ª—å–º–∞.")

async def random_genre_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ü–ï–†–í–´–ô –≤—ã–±–æ—Ä –∂–∞–Ω—Ä–∞ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞."""
    query = update.callback_query
    await query.answer()
    await query.delete_message()    
    temp_message = await context.bot.send_message(query.message.chat_id, "üîç –ü–æ–¥–±–∏—Ä–∞—é —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º...")
    
    class FakeQuery:
        def __init__(self, msg, data):
            self.message = msg
            self.data = data
        async def edit_message_text(self, text):
            return await self.message.edit_text(text)
        async def edit_message_media(self, media, reply_markup):
            return await self.message.edit_media(media=media, reply_markup=reply_markup)

    await process_random_request(FakeQuery(temp_message, query.data), context)

async def reroll_random_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å' –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞."""
    query = update.callback_query
    await query.answer()
    await process_random_request(query, context)


async def daily_check_job(context: ContextTypes.DEFAULT_TYPE):
    """
    –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ø-5 —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤ –≤ 14:00 –ú–°–ö
    –∫–∞–∂–¥–æ–º—É –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–º—É —á–∞—Ç—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    """
    print(f"[{datetime.now().isoformat()}] Running daily check job for digital releases")
    chat_ids = context.bot_data.get("chat_ids", set())
    if not chat_ids: return
    try:
        base_movies = await _get_todays_top_digital_releases_blocking(limit=5)
        if not base_movies:
            for chat_id in list(chat_ids):
                await context.bot.send_message(chat_id, "üé¨ –°–µ–≥–æ–¥–Ω—è –∑–Ω–∞—á–∏–º—ã—Ö —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        enriched_movies = []
        for movie in base_movies:
            movie_with_translated_overview = {
                **movie,
                "overview": await asyncio.to_thread(translate_text_blocking, movie.get("overview", ""))
            }
            enriched_movies.append(movie_with_translated_overview)
            await asyncio.sleep(0.4)

        for chat_id in list(chat_ids):
            print(f"Sending daily digital releases to {chat_id}")
            list_id = str(uuid.uuid4())
            context.bot_data.setdefault('movie_lists', {})[list_id] = enriched_movies
            text, poster, markup = await format_movie_message(enriched_movies[0], context.bot_data.get('genres', {}), "üé¨ –°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–∏—Ç –≤ —Ü–∏—Ñ—Ä–µ:", is_paginated=True, current_index=0, total_count=len(enriched_movies), list_id=list_id)
            await context.bot.send_photo(chat_id, photo=poster, caption=text, parse_mode=constants.ParseMode.MARKDOWN, reply_markup=markup)
            await asyncio.sleep(1)
    except Exception as e:
        print(f"[ERROR] Daily job for digital releases failed: {e}")

# --- –°–ë–û–†–ö–ê –ò –ó–ê–ü–£–°–ö ---
def main():
    persistence = PicklePersistence(filepath="bot_data.pkl")
    application = (
        Application.builder()
        .token(TELEGRAM_BOT_TOKEN)
        .persistence(persistence)
        .post_init(on_startup)
        .build()
    )

    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("releases", premieres_command))
    application.add_handler(CommandHandler("premieres", premieres_command))
    application.add_handler(CommandHandler("next", next_releases_command))
    application.add_handler(CommandHandler("stop", stop_command))
    application.add_handler(CommandHandler("year", year_command))
    application.add_handler(CommandHandler("random", random_command))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(pagination_handler, pattern="^page_"))
    application.add_handler(CallbackQueryHandler(random_genre_handler, pattern="^random_"))
    application.add_handler(CallbackQueryHandler(reroll_random_handler, pattern="^reroll_"))
    application.add_handler(CallbackQueryHandler(lambda u, c: u.callback_query.answer(), pattern="^noop$"))
    
    tz = ZoneInfo("Europe/Moscow")
    scheduled_time = time(hour=14, minute=0, tzinfo=tz)
    application.job_queue.run_daily(daily_check_job, scheduled_time, name="daily_movie_check")

    print("[INFO] Starting bot...")
    application.run_polling()

if __name__ == "__main__":
    main()


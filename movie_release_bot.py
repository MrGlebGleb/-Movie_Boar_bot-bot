#!/usr/bin/env python3
"""
Movie release Telegram bot with advanced random movie feature.
"""

import os
import requests
import asyncio
import uuid
import random
from datetime import datetime, time, timezone
from zoneinfo import ZoneInfo
from telegram import constants, Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    PicklePersistence,
    ContextTypes,
)
import translators as ts

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def translate_text_blocking(text: str, to_lang='ru') -> str:
    if not text: return ""
    try: return ts.translate_text(text, translator='google', to_language=to_lang)
    except Exception as e:
        print(f"[ERROR] Translators library failed: {e}")
        return text

async def on_startup(context: ContextTypes.DEFAULT_TYPE):
    """–ö—ç—à–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞."""
    print("[INFO] Caching movie genres...")
    url = "https://api.themoviedb.org/3/genre/movie/list"
    params = {"api_key": TMDB_API_KEY, "language": "ru-RU"}
    try:
        r = requests.get(url, params=params, timeout=15)
        r.raise_for_status()
        genres = {g['id']: g['name'] for g in r.json()['genres']}
        context.bot_data['genres'] = genres
        context.bot_data['genres_by_name'] = {v.lower(): k for k, v in genres.items()}
        print(f"[INFO] Successfully cached {len(genres)} genres.")
    except Exception as e:
        print(f"[ERROR] Could not cache genres: {e}")
        context.bot_data['genres'] = {}
        context.bot_data['genres_by_name'] = {}


# --- CONFIG ---
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
TMDB_API_KEY = os.environ.get("TMDB_API_KEY")

if not TELEGRAM_BOT_TOKEN or not TMDB_API_KEY:
    raise RuntimeError("One or more environment variables are not set!")

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å TMDb ---

def _get_todays_movie_premieres_blocking(limit=10):
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    today_str = datetime.now(timezone.utc).strftime('%Y-%m-%d')
    url = "https://api.themoviedb.org/3/discover/movie"
    params = {"api_key": TMDB_API_KEY, "language": "en-US", "sort_by": "popularity.desc", "include_adult": "false", "with_original_language": "en|es|fr|de|it", "primary_release_date.gte": today_str, "primary_release_date.lte": today_str}
    r = requests.get(url, params=params, timeout=20)
    r.raise_for_status()
    return [m for m in r.json().get("results", []) if m.get("poster_path")][:limit]

def _get_historical_premieres_blocking(year: int, month_day: str, limit=3):
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    target_date = f"{year}-{month_day}"
    url = "https://api.themoviedb.org/3/discover/movie"
    params = {"api_key": TMDB_API_KEY, "language": "en-US", "sort_by": "popularity.desc", "include_adult": "false", "primary_release_date.gte": target_date, "primary_release_date.lte": target_date}
    r = requests.get(url, params=params, timeout=20)
    r.raise_for_status()
    return [m for m in r.json().get("results", []) if m.get("poster_path")][:limit]

def _get_random_movie_blocking(with_genres: str, without_genres: str = None, with_original_language: str = None, without_original_language: str = None):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞ —Å –≥–∏–±–∫–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏."""
    discover_url = "https://api.themoviedb.org/3/discover/movie"
    params = {
        "api_key": TMDB_API_KEY, "language": "en-US", "sort_by": "popularity.desc",
        "include_adult": "false", "with_genres": with_genres,
        "vote_average.gte": 7.0, "vote_count.gte": 100,
        "primary_release_date.gte": "1985-01-01", "primary_release_date.lte": "2025-12-31",
        "page": 1
    }
    if without_genres: params["without_genres"] = without_genres
    if with_original_language: params["with_original_language"] = with_original_language
    if without_original_language: params["without_original_language"] = without_original_language

    r = requests.get(discover_url, params=params, timeout=20)
    r.raise_for_status()
    data = r.json()
    total_pages = data.get("total_pages", 1)
    if total_pages == 0: return None
    
    random_page = random.randint(1, min(total_pages, 500))
    params["page"] = random_page
    r = requests.get(discover_url, params=params, timeout=20)
    r.raise_for_status()
    results = [m for m in r.json().get("results", []) if m.get("poster_path")]
    return random.choice(results) if results else None

def _get_movie_details_blocking(movie_id: int):
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    url = f"https://api.themoviedb.org/3/movie/{movie_id}"
    params = {"api_key": TMDB_API_KEY, "append_to_response": "videos,watch/providers"}
    r = requests.get(url, params=params, timeout=20)
    r.raise_for_status()
    return r.json()

def _parse_watch_providers(providers_data: dict) -> str:
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    results = providers_data.get("results", {}).get("RU", providers_data.get("results", {}).get("US"))
    if not results: return "üçø –¢–æ–ª—å–∫–æ –≤ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–∞—Ö"
    flatrate, buy = results.get("flatrate"), results.get("buy")
    if flatrate:
        names = [p["provider_name"] for p in flatrate[:2]]
        return f"üì∫ –û–Ω–ª–∞–π–Ω: {', '.join(names)}"
    if buy: return "üíª –¶–∏—Ñ—Ä–æ–≤–æ–π —Ä–µ–ª–∏–∑"
    return "üçø –¢–æ–ª—å–∫–æ –≤ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–∞—Ö"

def _parse_trailer(videos_data: dict) -> str | None:
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    for video in videos_data.get("results", []):
        if video.get("type") == "Trailer" and video.get("site") == "YouTube":
            return f"https://www.youtube.com/watch?v={video['key']}"
    return None

async def _enrich_movie_data(movie: dict) -> dict:
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    details = await asyncio.to_thread(_get_movie_details_blocking, movie['id'])
    overview_ru = await asyncio.to_thread(translate_text_blocking, movie.get("overview", ""))
    await asyncio.sleep(0.4)
    return {**movie, "overview": overview_ru, "watch_status": _parse_watch_providers(details.get("watch/providers", {})), "trailer_url": _parse_trailer(details.get("videos", {})), "poster_url": f"https://image.tmdb.org/t/p/w780{movie['poster_path']}"}

# --- –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –ò –ü–ê–ì–ò–ù–ê–¶–ò–Ø ---

async def format_movie_message(movie_data: dict, genres_map: dict, title_prefix: str, is_paginated: bool = False, current_index: int = 0, total_count: int = 1, list_id: str = ""):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ª—é–±–æ–≥–æ —Ç–∏–ø–∞ –≤—ã–≤–æ–¥–∞."""
    title, overview, poster_url = movie_data.get("title"), movie_data.get("overview"), movie_data.get("poster_url")
    rating, genre_ids = movie_data.get("vote_average", 0), movie_data.get("genre_ids", [])
    genre_names = [genres_map.get(gid, "") for gid in genre_ids[:2]]
    genres_str, watch_status, trailer_url = ", ".join(filter(None, genre_names)), movie_data.get("watch_status"), movie_data.get("trailer_url")

    text = f"{title_prefix} *{title}*\n\n"
    if rating > 0: text += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating:.1f}/10\n"
    if watch_status: text += f"–°—Ç–∞—Ç—É—Å: {watch_status}\n"
    if genres_str: text += f"–ñ–∞–Ω—Ä: {genres_str}\n"
    text += f"\n{overview}"
    
    keyboard = []
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ ---
    if is_paginated:
        nav_buttons = []
        if current_index > 0: nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{list_id}_{current_index - 1}"))
        nav_buttons.append(InlineKeyboardButton(f"[{current_index + 1}/{total_count}]", callback_data="noop"))
        if current_index < total_count - 1: nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"page_{list_id}_{current_index + 1}"))
        keyboard.append(nav_buttons)
    
    if trailer_url: keyboard.append([InlineKeyboardButton("üé¨ –°–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–µ–π–ª–µ—Ä", url=trailer_url)])
    
    return text, poster_url, InlineKeyboardMarkup(keyboard) if keyboard else None

# --- –ö–û–ú–ê–ù–î–´ –ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---
# ... (start_command, help_command, stop_command, premieres_command, year_command –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    chat_ids = context.bot_data.setdefault("chat_ids", set())
    msg = (
        "‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n\n"
        "–Ø –±—É–¥—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 14:00 –ø–æ –ú–°–ö –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å—é–¥–∞ –∞–Ω–æ–Ω—Å—ã –∫–∏–Ω–æ–ø—Ä–µ–º—å–µ—Ä.\n\n"
        "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "‚Ä¢ `/releases` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–º—å–µ—Ä—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n"
        "‚Ä¢ `/random` ‚Äî –≤—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –ø–æ –∂–∞–Ω—Ä—É.\n"
        "‚Ä¢ `/year <–≥–æ–¥>` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø-3 —Ñ–∏–ª—å–º–∞, –≤—ã—à–µ–¥—à–∏—Ö –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –≤ –ø—Ä–æ—à–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: `/year 1999`).\n"
        "‚Ä¢ `/help` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "‚Ä¢ `/stop` ‚Äî –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏."
    )
    if chat_id not in chat_ids:
        chat_ids.add(chat_id)
        await update.message.reply_text(msg, parse_mode=constants.ParseMode.MARKDOWN)
    else:
        await update.message.reply_text("–≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ. " + msg, parse_mode=constants.ParseMode.MARKDOWN)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "**–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:**\n\n"
        "‚Ä¢ `/releases` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–º—å–µ—Ä—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n"
        "‚Ä¢ `/random` ‚Äî –≤—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –ø–æ –∂–∞–Ω—Ä—É.\n"
        "‚Ä¢ `/year <–≥–æ–¥>` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø-3 —Ñ–∏–ª—å–º–∞, –≤—ã—à–µ–¥—à–∏—Ö –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –≤ –ø—Ä–æ—à–ª–æ–º.\n"
        "‚Ä¢ `/start` ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.\n"
        "‚Ä¢ `/stop` ‚Äî –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.",
        parse_mode=constants.ParseMode.MARKDOWN
    )

async def stop_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in context.bot_data.setdefault("chat_ids", set()):
        context.bot_data["chat_ids"].remove(chat_id)
        await update.message.reply_text("‚ùå –≠—Ç–æ—Ç —á–∞—Ç –æ—Ç–ø–∏—Å–∞–Ω –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")
    else:
        await update.message.reply_text("–≠—Ç–æ—Ç —á–∞—Ç –∏ —Ç–∞–∫ –Ω–µ –±—ã–ª –ø–æ–¥–ø–∏—Å–∞–Ω.")

async def premieres_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîç –ò—â—É –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –ø—Ä–µ–º—å–µ—Ä—ã...")
    try:
        base_movies = await asyncio.to_thread(_get_todays_movie_premieres_blocking)
        if not base_movies:
            await update.message.reply_text("üé¨ –ó–Ω–∞—á–∏–º—ã—Ö –ø—Ä–µ–º—å–µ—Ä –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        enriched_movies = await asyncio.gather(*[_enrich_movie_data(movie) for movie in base_movies])
        list_id = str(uuid.uuid4())
        context.bot_data.setdefault('movie_lists', {})[list_id] = enriched_movies
        text, poster, markup = await format_movie_message(enriched_movies[0], context.bot_data.get('genres', {}), "üé¨ –°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–∏—Ç:", is_paginated=True, current_index=0, total_count=len(enriched_movies), list_id=list_id)
        await update.message.reply_photo(photo=poster, caption=text, parse_mode=constants.ParseMode.MARKDOWN, reply_markup=markup)
    except Exception as e:
        print(f"[ERROR] premieres_command failed: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")

async def year_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≥–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/year 1999`", parse_mode=constants.ParseMode.MARKDOWN)
        return
    try:
        year = int(context.args[0])
        if not (1970 <= year <= 2025): raise ValueError("–ì–æ–¥ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
    except (ValueError, IndexError):
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1995).")
        return
    
    await update.message.reply_text(f"üîç –ò—â—É —Ç–æ–ø-3 —Ä–µ–ª–∏–∑–∞ –∑–∞ {year} –≥–æ–¥...")
    try:
        month_day = datetime.now(timezone.utc).strftime('%m-%d')
        base_movies = await asyncio.to_thread(_get_historical_premieres_blocking, year, month_day)
        if not base_movies:
            await update.message.reply_text(f"ü§∑‚Äç‚ôÇÔ∏è –ù–µ –Ω–∞—à–µ–ª –∑–Ω–∞—á–∏–º—ã—Ö –ø—Ä–µ–º—å–µ—Ä –∑–∞ —ç—Ç—É –¥–∞—Ç—É –≤ {year} –≥–æ–¥—É.")
            return

        enriched_movies = await asyncio.gather(*[_enrich_movie_data(movie) for movie in base_movies])
        list_id = str(uuid.uuid4())
        context.bot_data.setdefault('movie_lists', {})[list_id] = enriched_movies
        text, poster, markup = await format_movie_message(enriched_movies[0], context.bot_data.get('genres', {}), f"üéûÔ∏è –†–µ–ª–∏–∑ {year} –≥–æ–¥–∞:", is_paginated=True, current_index=0, total_count=len(enriched_movies), list_id=list_id)
        await update.message.reply_photo(photo=poster, caption=text, parse_mode=constants.ParseMode.MARKDOWN, reply_markup=markup)
    except Exception as e:
        print(f"[ERROR] year_command failed: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –≥–æ–¥—É.")

async def random_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞."""
    genres_by_name = context.bot_data.get('genres_by_name', {})
    if not genres_by_name:
        await update.message.reply_text("–ñ–∞–Ω—Ä—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.")
        return

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ö—É—Ä–∏—Ä—É–µ–º—ã–π —Å–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤ + —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ ---
    target_genres = ["–ë–æ–µ–≤–∏–∫", "–ö–æ–º–µ–¥–∏—è", "–£–∂–∞—Å—ã", "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "–¢—Ä–∏–ª–ª–µ—Ä", "–î—Ä–∞–º–∞", "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è", "–§—ç–Ω—Ç–µ–∑–∏"]
    keyboard = []
    row = []
    # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    row.append(InlineKeyboardButton("–ú—É–ª—å—Ç—Ñ–∏–ª—å–º—ã", callback_data="random_cartoon"))
    row.append(InlineKeyboardButton("–ê–Ω–∏–º–µ", callback_data="random_anime"))
    keyboard.append(row)
    row = [] # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä—è–¥ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤

    for genre_name in target_genres:
        genre_id = genres_by_name.get(genre_name.lower())
        if genre_id:
            row.append(InlineKeyboardButton(genre_name, callback_data=f"random_genre_{genre_id}"))
            if len(row) == 2:
                keyboard.append(row)
                row = []
    if row: keyboard.append(row)

    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –∂–∞–Ω—Ä:", reply_markup=InlineKeyboardMarkup(keyboard))

async def random_genre_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∂–∞–Ω—Ä–∞, –∏—â–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–ª—å–º."""
    query = update.callback_query
    await query.answer()
    
    data = query.data.split("_")
    random_type = data[1]
    
    genres_map = context.bot_data.get('genres', {})
    animation_id = next((gid for gid, name in genres_map.items() if name == "–º—É–ª—å—Ç—Ñ–∏–ª—å–º"), "16") # ID –∂–∞–Ω—Ä–∞ "–ê–Ω–∏–º–∞—Ü–∏—è"

    params = {}
    search_query_text = ""

    if random_type == "genre":
        params["with_genres"] = data[2]
        params["without_genres"] = animation_id
        search_query_text = f"'{genres_map.get(int(data[2]))}'"
    elif random_type == "cartoon":
        params["with_genres"] = animation_id
        params["without_original_language"] = "ja" # –ò—Å–∫–ª—é—á–∞–µ–º —è–ø–æ–Ω—Å–∫–∏–π —è–∑—ã–∫
        search_query_text = "'–ú—É–ª—å—Ç—Ñ–∏–ª—å–º'"
    elif random_type == "anime":
        params["with_genres"] = animation_id
        params["with_original_language"] = "ja" # –¢–æ–ª—å–∫–æ —è–ø–æ–Ω—Å–∫–∏–π —è–∑—ã–∫
        search_query_text = "'–ê–Ω–∏–º–µ'"
    
    await query.edit_message_text(f"üîç –ü–æ–¥–±–∏—Ä–∞—é —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {search_query_text}...")
    try:
        random_movie = await asyncio.to_thread(_get_random_movie_blocking, **params)
        if not random_movie:
            await query.edit_message_text("ü§∑‚Äç‚ôÇÔ∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∏–ª—å–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
            return

        enriched_movie = await _enrich_movie_data(random_movie)
        text, poster, markup = await format_movie_message(enriched_movie, genres_map, "üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º:", is_paginated=False)
        await query.delete_message()
        await context.bot.send_photo(query.message.chat_id, photo=poster, caption=text, parse_mode=constants.ParseMode.MARKDOWN, reply_markup=markup)
    except Exception as e:
        print(f"[ERROR] random_genre_handler failed: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∏–ª—å–º–∞.")


async def pagination_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    try:
        _, list_id, new_index_str = query.data.split("_")
        new_index = int(new_index_str)
    except (ValueError, IndexError): return

    movies = context.bot_data.get('movie_lists', {}).get(list_id)
    if not movies or not (0 <= new_index < len(movies)):
        await query.edit_message_text("–û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞—Ä–µ–ª. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return
    
    title_prefix = "üé¨ –°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–∏—Ç:"
    release_year_str = movies[new_index].get('release_date', '????')[:4]
    if release_year_str.isdigit() and int(release_year_str) < datetime.now().year:
        title_prefix = f"üéûÔ∏è –†–µ–ª–∏–∑ {release_year_str} –≥–æ–¥–∞:"

    text, poster, markup = await format_movie_message(
        movies[new_index], context.bot_data.get('genres', {}), title_prefix, is_paginated=True, current_index=new_index, total_count=len(movies), list_id=list_id
    )
    try:
        media = InputMediaPhoto(media=poster, caption=text, parse_mode=constants.ParseMode.MARKDOWN)
        await query.edit_message_media(media=media, reply_markup=markup)
    except Exception as e:
        print(f"[WARN] Failed to edit message media: {e}")

async def daily_check_job(context: ContextTypes.DEFAULT_TYPE):
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    print(f"[{datetime.now().isoformat()}] Running daily check job")
    chat_ids = context.bot_data.get("chat_ids", set())
    if not chat_ids: return
    try:
        base_movies = await asyncio.to_thread(_get_todays_movie_premieres_blocking, limit=3)
        if not base_movies: return
        enriched_movies = await asyncio.gather(*[_enrich_movie_data(movie) for movie in base_movies])
        for chat_id in list(chat_ids):
            print(f"Sending daily to {chat_id}")
            for movie in enriched_movies:
                text, poster, markup = await format_movie_message(movie, context.bot_data.get('genres', {}), "üé¨ –°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–∏—Ç:", is_paginated=False)
                await context.bot.send_photo(chat_id, photo=poster, caption=text, parse_mode=constants.ParseMode.MARKDOWN, reply_markup=markup)
                await asyncio.sleep(1)
    except Exception as e:
        print(f"[ERROR] Daily job failed: {e}")


# --- –°–ë–û–†–ö–ê –ò –ó–ê–ü–£–°–ö ---
def main():
    persistence = PicklePersistence(filepath="bot_data.pkl")
    application = (
        Application.builder()
        .token(TELEGRAM_BOT_TOKEN)
        .persistence(persistence)
        .post_init(on_startup)
        .build()
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("releases", premieres_command))
    application.add_handler(CommandHandler("premieres", premieres_command))
    application.add_handler(CommandHandler("stop", stop_command))
    application.add_handler(CommandHandler("year", year_command))
    application.add_handler(CommandHandler("random", random_command))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(pagination_handler, pattern="^page_"))
    application.add_handler(CallbackQueryHandler(random_genre_handler, pattern="^random_"))
    application.add_handler(CallbackQueryHandler(lambda u, c: u.callback_query.answer(), pattern="^noop$"))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∑–∞–¥–∞—á—É
    tz = ZoneInfo("Europe/Moscow")
    scheduled_time = time(hour=14, minute=0, tzinfo=tz)
    application.job_queue.run_daily(daily_check_job, scheduled_time, name="daily_movie_check")

    print("[INFO] Starting bot...")
    application.run_polling()

if __name__ == "__main__":
    main()

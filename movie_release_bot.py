#!/usr/bin/env python3
"""
Movie release Telegram bot with full pagination support (media & text).
"""

import os
import requests
import asyncio
import uuid
from datetime import datetime, time, timezone
from zoneinfo import ZoneInfo
from telegram import constants, Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    PicklePersistence,
    ContextTypes,
)
import translators as ts

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def translate_text_blocking(text: str, to_lang='ru') -> str:
    if not text: return ""
    try: return ts.translate_text(text, translator='google', to_language=to_lang)
    except Exception as e:
        print(f"[ERROR] Translators library failed: {e}")
        return text

async def on_startup(context: ContextTypes.DEFAULT_TYPE):
    """–ö—ç—à–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞."""
    print("[INFO] Caching movie genres...")
    url = "https://api.themoviedb.org/3/genre/movie/list"
    params = {"api_key": TMDB_API_KEY, "language": "ru-RU"}
    try:
        r = requests.get(url, params=params, timeout=15)
        r.raise_for_status()
        genres = {g['id']: g['name'] for g in r.json()['genres']}
        context.bot_data['genres'] = genres
        print(f"[INFO] Successfully cached {len(genres)} genres.")
    except Exception as e:
        print(f"[ERROR] Could not cache genres: {e}")
        context.bot_data['genres'] = {}

# --- CONFIG ---
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
TMDB_API_KEY = os.environ.get("TMDB_API_KEY")

if not TELEGRAM_BOT_TOKEN or not TMDB_API_KEY:
    raise RuntimeError("One or more environment variables are not set!")

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å TMDb ---

def _get_todays_movie_premieres_blocking(limit=10):
    today_str = datetime.now(timezone.utc).strftime('%Y-%m-%d')
    url = "https://api.themoviedb.org/3/discover/movie"
    params = {
        "api_key": TMDB_API_KEY, "language": "en-US", "sort_by": "popularity.desc",
        "include_adult": "false", "with_original_language": "en|es|fr|de|it",
        "primary_release_date.gte": today_str, "primary_release_date.lte": today_str,
    }
    r = requests.get(url, params=params, timeout=20)
    r.raise_for_status()
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∏–ª—å–º—ã –±–µ–∑ –ø–æ—Å—Ç–µ—Ä–∞ —Å—Ä–∞–∑—É
    return [m for m in r.json().get("results", []) if m.get("poster_path")][:limit]

def _get_movie_details_blocking(movie_id: int):
    url = f"https://api.themoviedb.org/3/movie/{movie_id}"
    params = {"api_key": TMDB_API_KEY, "append_to_response": "videos"}
    r = requests.get(url, params=params, timeout=20)
    r.raise_for_status()
    return r.json()

def _parse_trailer(videos_data: dict) -> str | None:
    for video in videos_data.get("results", []):
        if video.get("type") == "Trailer" and video.get("site") == "YouTube":
            return f"https://www.youtube.com/watch?v={video['key']}"
    return None

# --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –ò –ü–ê–ì–ò–ù–ê–¶–ò–ò ---

async def format_movie_for_pagination(movie: dict, genres_map: dict, current_index: int, total_count: int, list_id: str):
    """–ì–æ—Ç–æ–≤–∏—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (—Ç–µ–∫—Å—Ç, –ø–æ—Å—Ç–µ—Ä, –∫–Ω–æ–ø–∫–∏) –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞."""
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ (—Ç—Ä–µ–π–ª–µ—Ä)
    details = await asyncio.to_thread(_get_movie_details_blocking, movie['id'])
    trailer_url = _parse_trailer(details.get("videos", {}))
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    title = movie.get("title", "No Title")
    overview = movie.get("overview", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
    poster_path = movie.get("poster_path")
    poster_url = f"https://image.tmdb.org/t/p/w780{poster_path}" if poster_path else None
    rating = movie.get("vote_average", 0)
    genre_names = [genres_map.get(gid, "") for gid in movie.get("genre_ids", [])[:2]]
    genres_str = ", ".join(filter(None, genre_names))

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ
    translated_overview = await asyncio.to_thread(translate_text_blocking, overview)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = f"üé¨ *{title}*\n\n"
    if rating > 0: text += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating:.1f}/10\n"
    if genres_str: text += f"–ñ–∞–Ω—Ä: {genres_str}\n"
    text += f"\n{translated_overview}"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = []
    nav_buttons = []
    if current_index > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{list_id}_{current_index - 1}"))
    
    nav_buttons.append(InlineKeyboardButton(f"[{current_index + 1}/{total_count}]", callback_data="noop"))

    if current_index < total_count - 1:
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"page_{list_id}_{current_index + 1}"))
    
    keyboard.append(nav_buttons)
    
    if trailer_url:
        keyboard.append([InlineKeyboardButton("üé¨ –°–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–µ–π–ª–µ—Ä", url=trailer_url)])
    
    reply_markup = InlineKeyboardMarkup(keyboard)

    return text, poster_url, reply_markup

# --- –ö–û–ú–ê–ù–î–´ –ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---

async def premieres_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–º—å–µ—Ä."""
    chat_id = update.effective_chat.id
    await update.message.reply_text("üîç –ò—â—É —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –ø—Ä–µ–º—å–µ—Ä—ã...")
    
    try:
        movies = await asyncio.to_thread(_get_todays_movie_premieres_blocking)
    except Exception as e:
        await context.bot.send_message(chat_id, text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return

    if not movies:
        await context.bot.send_message(chat_id, text="üé¨ –ó–Ω–∞—á–∏–º—ã—Ö –ø—Ä–µ–º—å–µ—Ä –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    list_id = str(uuid.uuid4())
    context.bot_data.setdefault('movie_lists', {})[list_id] = movies
    
    text, poster, markup = await format_movie_for_pagination(
        movie=movies[0],
        genres_map=context.bot_data.get('genres', {}),
        current_index=0,
        total_count=len(movies),
        list_id=list_id
    )
    
    await context.bot.send_photo(chat_id, photo=poster, caption=text, parse_mode=constants.ParseMode.MARKDOWN, reply_markup=markup)

async def pagination_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –∏ '–í–ø–µ—Ä–µ–¥'."""
    query = update.callback_query
    await query.answer()

    try:
        _, list_id, new_index_str = query.data.split("_")
        new_index = int(new_index_str)
    except (ValueError, IndexError):
        return

    movies = context.bot_data.get('movie_lists', {}).get(list_id)

    if not movies or not (0 <= new_index < len(movies)):
        await query.edit_message_text("–û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ —É—Å—Ç–∞—Ä–µ–ª. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ —Ä–µ–ª–∏–∑—ã –∑–∞–Ω–æ–≤–æ: /releases.")
        return
        
    text, poster, markup = await format_movie_for_pagination(
        movie=movies[new_index],
        genres_map=context.bot_data.get('genres', {}),
        current_index=new_index,
        total_count=len(movies),
        list_id=list_id
    )

    # --- –í–ê–ñ–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ó–∞–º–µ–Ω—è–µ–º –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç ---
    try:
        media = InputMediaPhoto(media=poster, caption=text, parse_mode=constants.ParseMode.MARKDOWN)
        await query.edit_message_media(media=media, reply_markup=markup)
    except Exception as e:
        print(f"[WARN] Failed to edit message media: {e}")


# --- –°–ë–û–†–ö–ê –ò –ó–ê–ü–£–°–ö (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —É–±—Ä–∞–Ω—ã –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã) ---
def main():
    persistence = PicklePersistence(filepath="bot_data.pkl")
    application = (
        Application.builder()
        .token(TELEGRAM_BOT_TOKEN)
        .persistence(persistence)
        .post_init(on_startup)
        .build()
    )

    application.add_handler(CommandHandler("start", premieres_command)) # /start —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–ª–∏–∑—ã
    application.add_handler(CommandHandler("releases", premieres_command))
    application.add_handler(CallbackQueryHandler(pagination_handler, pattern="^page_"))

    print("[INFO] Starting bot (run_polling).")
    application.run_polling()

if __name__ == "__main__":
    main()

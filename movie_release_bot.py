#!/usr/bin/env python3
"""
Movie release Telegram bot with full pagination and pre-caching.
"""

import os
import requests
import asyncio
import uuid
from datetime import datetime
from telegram import constants, Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    PicklePersistence,
    ContextTypes,
)
import translators as ts

# --- CONFIG ---
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
TMDB_API_KEY = os.environ.get("TMDB_API_KEY")

if not TELEGRAM_BOT_TOKEN or not TMDB_API_KEY:
    raise RuntimeError("TELEGRAM_BOT_TOKEN –∏–ª–∏ TMDB_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def translate_text_blocking(text: str, to_lang='ru') -> str:
    """–ë–ª–æ–∫–∏—Ä—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞."""
    if not text:
        return ""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º to_language –≤–º–µ—Å—Ç–æ to_lang –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        return ts.translate_text(text, translator='google', to_language=to_lang)
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ translators: {e}")
        return text  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

async def on_startup(context: ContextTypes.DEFAULT_TYPE):
    """–ö—ç—à–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞."""
    print("[INFO] –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∂–∞–Ω—Ä–æ–≤ —Ñ–∏–ª—å–º–æ–≤...")
    url = "https://api.themoviedb.org/3/genre/movie/list"
    params = {"api_key": TMDB_API_KEY, "language": "ru-RU"}
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º httpx –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, –Ω–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ requests —Ç–æ–∂–µ –ø–æ–¥–æ–π–¥–µ—Ç
        loop = asyncio.get_running_loop()
        r = await loop.run_in_executor(None, lambda: requests.get(url, params=params, timeout=15))
        r.raise_for_status()
        genres = {g['id']: g['name'] for g in r.json()['genres']}
        context.bot_data['genres'] = genres
        print(f"[INFO] –£—Å–ø–µ—à–Ω–æ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ {len(genres)} –∂–∞–Ω—Ä–æ–≤.")
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞—Ç—å –∂–∞–Ω—Ä—ã: {e}")
        context.bot_data['genres'] = {}

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å TMDb (–±–ª–æ–∫–∏—Ä—É—é—â–∏–µ) ---

def _get_todays_movie_premieres_blocking(limit=10):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –ø—Ä–µ–º—å–µ—Ä (–±–ª–æ–∫–∏—Ä—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è)."""
    today_str = datetime.now().strftime('%Y-%m-%d')
    url = "https://api.themoviedb.org/3/discover/movie"
    params = {
        "api_key": TMDB_API_KEY, "language": "en-US", "sort_by": "popularity.desc",
        "include_adult": "false", "with_original_language": "en",
        "primary_release_date.gte": today_str, "primary_release_date.lte": today_str,
    }
    r = requests.get(url, params=params, timeout=20)
    r.raise_for_status()
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∏–ª—å–º—ã –±–µ–∑ –ø–æ—Å—Ç–µ—Ä–∞
    return [m for m in r.json().get("results", []) if m.get("poster_path")][:limit]

def _get_movie_details_blocking(movie_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ (–±–ª–æ–∫–∏—Ä—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è)."""
    url = f"https://api.themoviedb.org/3/movie/{movie_id}"
    params = {"api_key": TMDB_API_KEY, "append_to_response": "videos,watch/providers"}
    r = requests.get(url, params=params, timeout=20)
    r.raise_for_status()
    return r.json()

# --- –§—É–Ω–∫—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö ---

def _parse_watch_providers(providers_data: dict) -> str:
    """–ü–∞—Ä—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö."""
    results = providers_data.get("results", {}).get("RU", providers_data.get("results", {}).get("US"))
    if not results: return "üçø –¢–æ–ª—å–∫–æ –≤ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–∞—Ö"
    
    flatrate = results.get("flatrate")
    if flatrate:
        names = [p["provider_name"] for p in flatrate[:2]]
        return f"üì∫ –û–Ω–ª–∞–π–Ω: {', '.join(names)}"
        
    if results.get("buy"): return "üíª –¶–∏—Ñ—Ä–æ–≤–æ–π —Ä–µ–ª–∏–∑"
    return "üçø –¢–æ–ª—å–∫–æ –≤ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–∞—Ö"

def _parse_trailer(videos_data: dict) -> str | None:
    """–ù–∞—Ö–æ–¥–∏—Ç URL —Ç—Ä–µ–π–ª–µ—Ä–∞ –Ω–∞ YouTube."""
    for video in videos_data.get("results", []):
        if video.get("type") == "Trailer" and video.get("site") == "YouTube":
            return f"https://www.youtube.com/watch?v={video['key']}"
    return None

# --- –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –ò –ü–ê–ì–ò–ù–ê–¶–ò–Ø ---

async def format_movie_for_pagination(movie_data: dict, genres_map: dict, current_index: int, total_count: int, list_id: str):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∏–ª—å–º–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    title = movie_data.get("title", "No Title")
    overview = movie_data.get("overview", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
    poster_url = movie_data.get("poster_url")
    rating = movie_data.get("vote_average", 0)
    genre_ids = movie_data.get("genre_ids", [])
    genre_names = [genres_map.get(gid, "") for gid in genre_ids[:2]] if genre_ids else []
    genres_str = ", ".join(filter(None, genre_names))
    watch_status = movie_data.get("watch_status", "–°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
    trailer_url = movie_data.get("trailer_url")

    text = f"üé¨ *–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–∏—Ç: {title}*\n\n"
    if rating > 0: text += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating:.1f}/10\n"
    text += f"–°—Ç–∞—Ç—É—Å: {watch_status}\n"
    if genres_str: text += f"–ñ–∞–Ω—Ä: {genres_str}\n"
    text += f"\n{overview}"
    
    keyboard = []
    nav_buttons = []
    if current_index > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{list_id}_{current_index - 1}"))
    
    nav_buttons.append(InlineKeyboardButton(f"[{current_index + 1}/{total_count}]", callback_data="noop"))
    
    if current_index < total_count - 1:
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"page_{list_id}_{current_index + 1}"))
    
    keyboard.append(nav_buttons)
    
    if trailer_url:
        keyboard.append([InlineKeyboardButton("üé¨ –°–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–µ–π–ª–µ—Ä", url=trailer_url)])
    
    return text, poster_url, InlineKeyboardMarkup(keyboard)

# --- –ù–û–í–ê–Ø –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –û–î–ù–û–ì–û –§–ò–õ–¨–ú–ê ---
async def _enrich_movie_data_async(movie: dict) -> dict | None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏, –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –æ–±–æ–≥–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å.
    """
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫–∏—Ä—É—é—â–∏–µ —Å–µ—Ç–µ–≤—ã–µ –≤—ã–∑–æ–≤—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
        details = await asyncio.to_thread(_get_movie_details_blocking, movie['id'])
        overview_ru = await asyncio.to_thread(translate_text_blocking, movie.get("overview", ""))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª—å–º–∞, —á—Ç–æ–±—ã —Å–Ω–∏–∑–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É
        await asyncio.sleep(0.3)

        return {
            **movie,
            "overview": overview_ru,
            "watch_status": _parse_watch_providers(details.get("watch/providers", {})),
            "trailer_url": _parse_trailer(details.get("videos", {})),
            "poster_url": f"https://image.tmdb.org/t/p/w780{movie['poster_path']}"
        }
    except Exception as e:
        print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∏–ª—å–º ID {movie.get('id', 'N/A')}: {e}")
        return None

# --- –ö–û–ú–ê–ù–î–´ –ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---

async def premieres_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–º—å–µ—Ä."""
    chat_id = update.effective_chat.id
    await update.message.reply_text("üîç –ò—â—É –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –ø—Ä–µ–º—å–µ—Ä—ã... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
    
    try:
        base_movies = await asyncio.to_thread(_get_todays_movie_premieres_blocking)
        if not base_movies:
            await context.bot.send_message(chat_id, text="üé¨ –ó–Ω–∞—á–∏–º—ã—Ö –ø—Ä–µ–º—å–µ—Ä –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ñ–∏–ª—å–º–æ–≤
        tasks = [_enrich_movie_data_async(movie) for movie in base_movies]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –∏ –∂–¥–µ–º –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        results = await asyncio.gather(*tasks)
        
        # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º —Ñ–∏–ª—å–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å (–≥–¥–µ —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ None)
        enriched_movies = [movie for movie in results if movie is not None]

        if not enriched_movies:
            await context.bot.send_message(chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–µ–º—å–µ—Ä–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
            
        list_id = str(uuid.uuid4())
        context.bot_data.setdefault('movie_lists', {})[list_id] = enriched_movies
        
        text, poster, markup = await format_movie_for_pagination(
            movie_data=enriched_movies[0],
            genres_map=context.bot_data.get('genres', {}),
            current_index=0,
            total_count=len(enriched_movies),
            list_id=list_id
        )
        await context.bot.send_photo(chat_id, photo=poster, caption=text, parse_mode=constants.ParseMode.MARKDOWN, reply_markup=markup)

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ premieres_command: {e}")
        await context.bot.send_message(chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")

async def pagination_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏."""
    query = update.callback_query
    await query.answer()

    try:
        _, list_id, new_index_str = query.data.split("_")
        new_index = int(new_index_str)
    except (ValueError, IndexError):
        await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.")
        return

    movies = context.bot_data.get('movie_lists', {}).get(list_id)
    if not movies or not (0 <= new_index < len(movies)):
        await query.edit_message_text("–û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞—Ä–µ–ª. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /releases.")
        return
        
    text, poster, markup = await format_movie_for_pagination(
        movie_data=movies[new_index],
        genres_map=context.bot_data.get('genres', {}),
        current_index=new_index,
        total_count=len(movies),
        list_id=list_id
    )

    try:
        media = InputMediaPhoto(media=poster, caption=text, parse_mode=constants.ParseMode.MARKDOWN)
        await query.edit_message_media(media=media, reply_markup=markup)
    except Exception as e:
        # –≠—Ç–∞ –æ—à–∏–±–∫–∞ –º–æ–∂–µ—Ç –≤–æ–∑–Ω–∏–∫–∞—Ç—å, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–ª–∏–∫–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ
        print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# --- –°–ë–û–†–ö–ê –ò –ó–ê–ü–£–°–ö ---
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    persistence = PicklePersistence(filepath="bot_data.pkl")
    application = (
        Application.builder()
        .token(TELEGRAM_BOT_TOKEN)
        .persistence(persistence)
        .post_init(on_startup)
        .build()
    )

    application.add_handler(CommandHandler(["start", "releases"], premieres_command))
    application.add_handler(CallbackQueryHandler(pagination_handler, pattern="^page_"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "noop" –∫–Ω–æ–ø–∫–∏ (–ø—É—Å—Ç—ã—à–∫–∏)
    application.add_handler(CallbackQueryHandler(lambda u, c: u.callback_query.answer(), pattern="^noop$"))

    print("[INFO] –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()

if __name__ == "__main__":
    main()
